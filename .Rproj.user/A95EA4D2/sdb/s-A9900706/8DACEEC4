{
    "collab_server" : "",
    "contents" : "#lineas \n# write.csv(con.historia, \"OperDataclean.csv\", row.names = F)\n# \n# g<- ggplot(data = datos%>%filter(sexo == \"femenino\", sueldo > 500, sueldo < 1400, year %in% c(2015,2016)), \n#            aes(x=sueldo, y=unmes, colour = year)) + geom_count(alpha = 0.5) +\n#      geom_smooth(confint = F) + \n#      xlab(\"Salary\") + \n#      ylab(\"Femenine - Probability of stay one month\") + \n#      ggtitle(\"WOMEN - Salary vs probability of staying one month at work\")\n# \n# g<- ggplot(data = datos%>%filter(sexo == \"masculino\"), aes(x=sueldo, y=unmes)) + geom_count(alpha = 0.5) +\n#      geom_smooth() + \n#      xlab(\"Salary\") + \n#      ylab(\"Femenine - Probability of stay one month\") + \n#      ggtitle(\"WOMEN - Salary vs probability of staying one month at work\")\n\n\nhistoric <- function(yearinicial = 2010, yearfinal = 2017){\n     require(dplyr)\n     require(tidyr)\n     #detach(package:plyr)\n     \n     #agregar historial\n     classes <- c(NUM = \"factor\", DSDNUM = \"factor\", NOMBRE = \"character\", DEPTO = \"factor\", \n                  FECHA = \"character\", MVTO = \"factor\", FMOVIM = \"character\", ADSDNUM = \"factor\", \n                  ADEPTO = \"factor\")\n\n     \n     historial.raw <- read.csv(\"historial.csv\", colClasses = classes, \n                           na.strings = c(\"  -   -\",\"\",\"<NA>\",\"NA NA\"), \n                           stringsAsFactors = F)\n     \n     #quitar primer renglon\n     historial.raw <- historial.raw[-1,]\n     \n     historial.raw$FECHA = as.Date(historial.raw$FECHA, \"%d/%m/%Y\")\n     historial.raw$FMOVIM = as.Date(historial.raw$FMOVIM, \"%d/%m/%Y\")\n     \n     #renombrar movimientos A-alta, B-baja, C-cambio, R-reingreso\n     mov.tipo <- data.frame(\"MVTO\" = c(\"A\",\"B\",\"C\",\"R\"), \"MOV.TIPO\" = c(\"ALTA\",\"BAJA\",\"CAMBIO\",\"ALTA\"))\n     historial.raw <- merge(historial.raw, mov.tipo, by = \"MVTO\")\n     \n     historial.raw <<- historial.raw[year(historial.raw$FECHA) >= yearinicial & year(historial.raw$FECHA) <= yearfinal,]%>%\n          arrange(FECHA)\n     \n     #CAMBIOS EN EL STATUS DE LA PERSONA EN EL TIEMPO\n     cambios <- historial.raw%>%\n          filter(MOV.TIPO == \"CAMBIO\",  SUELDO >0)%>%\n          group_by(NUM)%>%\n          summarise(\"cambios.depto\" = n_distinct(DEPTO)-1,\n                    \"reingresos\" = n(),\n                    \"cambios.sueldo\" = n_distinct(SUELDO)-1,\n                    \"sueldo.min\" = min(SUELDO), \"sueldo.max\" = max(SUELDO),\n                    \"aumento\" = sueldo.max - sueldo.min,\n                    \"dias.para.aumento\" = ifelse(aumento >0, max(FECHA) - min(FECHA), 0))\n     \n     #dias entre su cambio y su baja (positivos es que salio despues de un cambio)\n     cambio.salidas <- historial.raw%>%\n          filter(MOV.TIPO %in% c(\"CAMBIO\",\"BAJA\"))%>%\n          group_by(NUM, MOV.TIPO)%>%\n          summarise(\"FECHA\" = max(FECHA))%>%\n          spread(MOV.TIPO, FECHA)%>%\n          mutate(\"dias.salio.cambio\" = BAJA-CAMBIO, \n                 \"salio.por.cambio\" = ifelse(dias.salio.cambio >= 0 & dias.salio.cambio <=15,1,0))%>%\n          select(NUM, dias.salio.cambio, salio.por.cambio)\n     \n     cambio <<- merge(cambios, cambio.salidas, by=\"NUM\", all.x = TRUE)\n     \n     \n     #agregar a BD general los cambios durante su estancia, sueldo, puestos, deptos\n     con.historia <- merge(personal.produccion, cambio, by = \"NUM\", all.x = TRUE)\n     \n\n     #corregir NA por sueldcon.historia actual en sueldo.max y sueldo.min\n     con.historia$sueldo.max.fit <- ifelse(is.na(con.historia$sueldo.max),\n                                           con.historia$sueldo,\n                                           con.historia$sueldo.max)\n     con.historia$sueldo.min.fit <- ifelse(is.na(con.historia$sueldo.min),\n                                           con.historia$sueldo,\n                                           con.historia$sueldo.min)\n\n     #aumentos, cambios de depto, etc que son NA se convienten en cero\n     con.historia[, 16:22][is.na(con.historia[, 16:22])] <- 0\n     con.historia[, 25:26][is.na(con.historia[, 25:26])] <- 0\n     \n     #corregir nombre de puestos preliminares y pespuntadores A,B,C\n     puestos <- read.csv(\"puestos.csv\")\n     con.historia <<- merge(con.historia, puestos, by = \"puesto\", all.x = TRUE)\n}\n\nexplore.hist <- function(){\n     library(tidyr)\n     \n     #dias trabajo promedio (NO PUDE RESOLVERLO)\n     # a<- historial.raw%>%\n     #      filter(MOV.TIPO != \"CAMBIO\")%>%\n     #      group_by(NUM, MOV.TIPO)%>%\n     #      select(NUM, MOV.TIPO,FECHA)%>%\n     #      arrange(NUM,FECHA,MOV.TIPO)\n}\n\n\nlimpia.general <- function(){\n     library(lubridate)\n     library(dplyr)\n     library(Amelia)\n     \n     classes <- c(primer_nom = \"character\", segdo_nom = \"character\", ap_paterno = \"character\",\n                  ap_materno = \"character\", telefono = \"character\", fingreso = \"character\", \n                  fnacido = \"character\", fbaja = \"character\",dsdnum = \"factor\")\n     personal <- read.csv(\"personal.csv\", colClasses = classes, \n                           na.strings = c(\"  -   -\",\"\",\"<NA>\",\"NA NA\"))\n     missmap(personal,main = \"Datos faltantes\", col = c(\"yellow\",\"gray\"))\n     \n     #character to dates\n     personal$fingreso = as.Date(personal$fingreso, \"%d/%m/%Y\")\n     personal$fnacido = as.Date(personal$fnacido, \"%d/%m/%Y\")\n     personal$fbaja = as.Date(personal$fbaja, \"%d/%m/%Y\")\n     \n     #corregir fecha baja del num 11340, unico error\n     personal$fbaja[personal$num ==  11340] <- \"2015-11-10\"\n     personal$motivo = paste(personal$motivo1, personal$motivo2)\n     personal <- personal\n     \n     #corregir fecha de ingreso con numero de empleado\n     ingresos <- personal[,c(4,20)]\n     #cambiar fecha a numero y eliminar nas\n     ingresos <- ingresos[!is.na(ingresos$fingreso),]\n     ingresos$datenum <- as.numeric(ingresos$fingreso)\n     \n     #elimina outliers de màs de 2 sigma, en residuals\n     fit <- lm(data = ingresos, datenum~num)\n     ingresos$res <- fit$residuals\n     sd2 <- sd(fit$residuals)*1\n     ingresos$outlier <- ifelse(abs(ingresos$res)>sd2,1,0)\n     \n     #añade las fechas fitted y limpia las que existen correctas\n     fit <- lm(data = ingresos[ingresos$outlier == 0,], datenum~num)\n     newy <- data.frame(\"num\" = personal$num)\n     personal$fitted <- round(predict(fit, newdata = newy))\n     personal$fingresofitted <- as.Date(ifelse(is.na(personal$fingreso),\n                                                    personal$fitted,  personal$fingreso),\n                                             origin = \"1970-01-01\")\n     \n     #calcula antiguedad al dia de hoy si aún trabajan\n     personal$antiguedad <- ifelse(personal$estatus == \"Alta\", \n                                   max(personal$fingresofitted) - personal$fingresofitted,\n                                   personal$fbaja - personal$fingresofitted)\n     \n     personal <- select(personal, -fitted)\n     \n     #sin fecha de naciimiento, edad = NA, no cero\n     personal$edad[personal$edad == 0] <- NA\n     personal$antiguedad[personal$antiguedad < 0] <- 0\n     personal.raw <<- personal%>%arrange(num)\n     \n     #calcula fecha de ingreso con su numero de empleado, pues es consecutivo\n     #a partir del num 8021, los registros se normalizan, se hacer un primer intento con esto\n     # equivale al 2012 para acá\n     personal <- personal.raw[personal.raw$num>8021,]\n     #personal <- personal.raw\n     \n     deptogral <- read.csv(\"filtro_deptos.csv\")\n     personal <- merge(personal, deptogral, by = \"subdepto\")\n\n     personal <- personal%>%\n          mutate(\"edad.fit\" = ifelse(!is.na(edad), ceiling(edad),\n                                       ceiling(floor(mean(personal$edad, na.rm = T)))),\n               \"rango.edad\" = ceiling(edad.fit/10), \n                 \"meses.antiguedad\" = floor(antiguedad/30),\n                 \"edo.civil.fit\" = ifelse(!is.na(edo_civil),edo_civil,\n                                          ifelse(rango.edad < 3, 3 , 1)))\n     personal[is.na(personal$estudios),]$estudios <- \"Ninguno\"\n     personal[is.na(personal$sexo),]$sexo <- \"masculino\"\n     \n     \n     deptogral <- read.csv(\"grupo_puestos.csv\")\n     personal <- merge(personal, deptogral, by = \"puesto\")\n     \n     #CORREGIR LEON MAL ESCRITO\n     personal$municipio <- as.factor(ifelse(personal$municipio %in% c(\"LEOH\",\"LON\",\"LEN\",\"EON\",\"LEO\",\"L\",\"NA\"),\n                                  paste(\"LEON\"),paste(personal$municipio)))\n     \n     clean <<- personal\n     \n     #solo produccion \n     personal.produccion <<- personal%>%\n          filter(depto == \"PRODUCCION\")%>%\n          select(\"NUM\" = num, antiguedad, depto.group, sexo, municipio, edo.civil.fit, \n                 sueldo, puesto, edad.fit, estudios, \"ingreso\" = fingresofitted, \n                 rango.edad, meses.antiguedad, grupo.puesto, nivel.critico)\n\n     missmap(personal.produccion,main = \"Faltantes despues de limpiar\", col = c(\"yellow\",\"gray\"))\n     \n}\n\n\nlearning <- function(duracion = 3, prob.level = 0.7, boost = FALSE, fecha.inicio = \"2016-01-01\",\n                     fecha.fin = \"2016-12-31\"){\n     library(caret)\n     \n     set.seed(888)\n     \n     #agregar a BD general los cambios durante su estancia, sueldo, puestos, deptos\n     for.fit <- con.historia %>%\n          filter(ingreso >= fecha.inicio & ingreso <= fecha.fin)\n     \n     #probabilidad que duren mas de \"duracion\" meses\n     for.fit$year.ingreso <- as.factor(year(for.fit$ingreso))\n     for.fit$mes.ingreso <- month(for.fit$ingreso)\n     for.fit$output <- as.factor(ifelse(for.fit$meses.antiguedad>=duracion,1,0))\n     \n     clean.data <<- for.fit%>%\n          select(-c(ingreso, puesto, nivel.critico, meses.antiguedad, municipio, \n                    grupo.puesto, NUM, antiguedad, year.ingreso, aumento, estudios, \n                    depto.group, puesto.fit, sueldo.min, sueldo.max))\n     #reorder, output first\n     clean.data <- clean.data[,c(ncol(clean.data), 1:ncol(clean.data)-1)]\n     \n     inTrain <- createDataPartition(clean.data$output, p=0.75, list = F)\n     \n     dtrain <<- clean.data[inTrain,]\n     dtest <<- clean.data[-inTrain,]\n     \n     glm.model <<- glm(output~.-1, family =  \"binomial\", data = dtrain)\n     \n     message(\"GLM\")\n     pred.glm <<- predict(glm.model, dtest, type = \"response\")\n     pred.fac.glm <- ifelse(pred.glm>=prob.level,1,0)\n     print(summary(glm.model))\n     print(confusionMatrix(pred.fac.glm, dtest$output))\n     \n     if (boost){\n          #tunning gradient boost\n          gbmGrid <-  expand.grid(interaction.depth = c(1, 5), \n                                  n.trees = (1:10)*50, \n                                  shrinkage = 0.1,\n                                  n.minobsinnode = c(1,5))\n          #result - interaction depth = 1, n.tress=150, shrinkage = 0.1 and nminsbox =20\n\n          fitControl <- trainControl(## 10-fold CV\n               method = \"repeatedcv\",\n               number = 10,\n               ## repeated ten times\n               repeats = 10)\n          \n          boost.model <<- train(output~., method = \"gbm\", data = dtrain, \n                                trControl = fitControl ,verbose = FALSE,\n                                tuneGrid = gbmGrid)\n          \n          message(\"BOOST\")\n          pred.boost <<- predict(boost.model, dtest, type = \"prob\")\n          pred.fac.boost <- ifelse(pred.boost[,2]>=prob.level,1,0)\n          print(summary(boost.model))\n          print(confusionMatrix(pred.fac.boost, dtest$output))\n     }\n}\n\n\nprobabilidadporsueldo <- function(duracion = 6){\n\n     require(ggplot2)\n     #probabilidad que duren mas de x meses\n     lmpersonal$seismeses <- ifelse(lmpersonal$meses.antiguedad>=duracion,1,0)\n     lmpersonal$year <- year(lmpersonal$ingreso)\n\n     lmpersonal <<- lmpersonal\n     \n     #porcentaje de gente que cumplio 6 meses\n     graficos <<- lmpersonal%>%\n               group_by(year, sueldo, sexo,seismeses)%>%\n               summarise(n=n())%>%\n               mutate(freq = n/sum(n))\n     View(graficos)\n     ggplot(data = graficos)\n     \n     #modelo\n     fit <- glm(seismeses~sueldo+factor(sexo), data = lmpersonal, family = \"binomial\")\n     \n     #plot\n     dsexo = c(\"masculino\",\"femenino\")\n     par(mfrow = c(1,2))\n     for (i in dsexo){\n          xsueldos <<- seq(800,2000,1)\n          data <- data.frame(sueldo = xsueldos, sexo = i)\n          yfit <- predict(fit, newdata = data,\n                              type = \"response\", \n                              confidence = \"interval\")\n          plot(yfit~xsueldos, pch = 16, main = i)\n     }\n     par(mfrow = c(1,1))\n}\n\npalabrascomunes <- function(){\n     require(c(tm,SnowballC))\n     palabras = NULL\n     \n     years <- c(2012:2016)\n     for (i in years){\n          motivos <- personal.raw[year(personal.raw$fingresofitted)== i,]$motivo\n          write.csv(motivos, \"motivos.csv\", row.names = FALSE)          \n          text <- readLines(\"motivos.csv\")\n          \n          docs <- Corpus(VectorSource(text))\n          \n          toSpace <- content_transformer(function (x , pattern ) gsub(pattern, \" \", x))\n          docs <- tm_map(docs, toSpace, \"/\")\n          docs <- tm_map(docs, toSpace, \"@\")\n          docs <- tm_map(docs, toSpace, \"\\\\|\")\n          \n          # Convert the text to lower case\n          docs <- tm_map(docs, content_transformer(tolower))\n          # Remove numbers\n          docs <- tm_map(docs, removeNumbers)\n          # Remove spanish common stopwords\n          docs <- tm_map(docs, removeWords, stopwords(\"spanish\"))\n          # Remove your own stop word\n          # specify your stopwords as a character vector\n          docs <- tm_map(docs, removeWords, c(\"NA\", \"mas\", \"trabajo\")) \n          # Remove punctuations\n          docs <- tm_map(docs, removePunctuation)\n          # Eliminate extra white spaces\n          docs <- tm_map(docs, stripWhitespace)\n          # Text stemming  (quita ing, ed, en inglés, en español causa problemas)\n          #docs <- tm_map(docs, stemDocument)\n          \n          dtm <- TermDocumentMatrix(docs)\n          m <- as.matrix(dtm)\n          v <- sort(rowSums(m),decreasing=TRUE)\n          d <- data.frame(year = i, razon = names(v), freq=v)\n          palabras <- rbind(palabras, head(d, 50))\n          \n     }\n     print(palabras)\n     palabras <<- palabras\n     \n}\n\nexploratory <- function(){\n\n     #hasta 24 meses\n     meses.personal <- filter(lmpersonal, meses.antiguedad <=1)\n     a2016 <<- lmpersonal[year(lmpersonal$ingreso) == \"2016\",]\n     \n     #altas y bajas por semana\n     \n     \n         \n}\n\ngrafica <- function(datos = lmpersonal, \n                    outcome = \"meses.antiguedad\", \n                    predictor = \"sexo\", \n                    gr = \"points\"){\n     a <- datos\n     colNums <- match(outcome,names(a))\n     y= a[,colNums]\n     colNums <- match(predictor,names(a))\n     x= a[,colNums]\n     \n     fit <- lm(data = a, y~x-1)\n     print(summary(fit))\n     if (gr == \"points\"){\n          ggplot(data = a, aes(x=x, y=y, colour = \"red\", alpha = 0.2)) + \n               geom_point() + geom_smooth(method = \"lm\", colour = \"navy\") + \n               xlab(predictor) + ylab(outcome)\n     } else {\n          ggplot(data = a, aes(x=factor(x), y=y, fill = predictor)) + \n               geom_boxplot() + facet_grid(~year) + \n               xlab(predictor) + ylab(outcome)          \n     }\n     \n}",
    "created" : 1484144566829.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2810327414",
    "id" : "8DACEEC4",
    "lastKnownWriteTime" : 1484694533,
    "last_content_update" : -2147483648,
    "path" : "~/Perugia/DelPersonal/personaPerugia.R",
    "project_path" : "personaPerugia.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}